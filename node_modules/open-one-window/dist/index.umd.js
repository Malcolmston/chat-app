(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('detect-browser')) :
  typeof define === 'function' && define.amd ? define(['detect-browser'], factory) :
  (global = global || self, global.OpenOneWindow = factory(global.detectBrowser));
}(this, function (detectBrowser) { 'use strict';

  /**
   * Open the only one window
   * @author imcuttle
   */

  var _ref = detectBrowser.detect() || { name: 'imcuttle'

    /**
     * @public
     * @name openOneWindow
     * @param options {{}}
     * @param [options.window=global] {Window}
     * @param [options.shouldFallback=true] Fallback the way when the browser is not chrome, It's will open every times when `false`
     * @return {Window}
     */
  },
      browserName = _ref.name;

  var index = (function () {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref2$window = _ref2.window,
        window = _ref2$window === undefined ? global : _ref2$window,
        _ref2$shouldFallback = _ref2.shouldFallback,
        shouldFallback = _ref2$shouldFallback === undefined ? true : _ref2$shouldFallback;

    return {
      win: null,
      open: function open(url) {
        var _arguments = arguments;

        var winOpen = function winOpen() {
          return window.open.apply(window, _arguments);
        };

        if (!shouldFallback && browserName !== 'chrome') {
          return winOpen();
        }

        if (browserName !== 'chrome' && this.win) {
          this.win.close && this.win.close();
        }

        if (this.win && this.win.closed) {
          this.win = null;
        }

        if (!this.win) {
          this.win = winOpen();
        } else {
          this.win.location.href = url;
        }

        this.win && this.win.focus && this.win.focus();
        return this.win;
      }
    };
  });

  return index;

}));
